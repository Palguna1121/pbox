// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  role          String    @default("user")
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id            String         @id @default(cuid())
  name          String         @unique
  description   String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  frameCatalogs FrameCatalog[]
  stickerCatalogs StickerCatalog[]
}

model FrameCatalog {
  id           String    @id @default(cuid())
  frameName    String
  imageUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  FramePlaceholders FramePlaceholder[]
}

model StickerCatalog {
  id           String           @id @default(cuid())
  stickerName  String
  imageUrl     String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  categoryId   String
  category     Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
}

model FormalPicture {
  id            String @id @default(cuid())
  name          String
  backgroundUrl String
  sizes         Json
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  type      String
  itemId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model FramePlaceholder {
  id        String   @id @default(cuid())
  xPosition Float
  yPosition Float
  width     Float
  height    Float
  frameId   String
  frame     FrameCatalog @relation(fields: [frameId], references: [id])
}